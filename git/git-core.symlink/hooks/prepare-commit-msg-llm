#!/usr/bin/env bash

# Exit if the `SKIP_LLM_GITHOOK` environment variable is set
if [ ! -z "$SKIP_LLM_GITHOOK" ]; then
  exit 0
fi

# Skip if message is already specified (e.g., via -m flag or amend)
if [ -n "$2" ]; then
  exit 0
fi

# Detect if we're in an interactive terminal
if [ -t 1 ]; then
  # ANSI color codes for styling the output (only in interactive terminal)
  RED='\033[0;31m'
  GREEN='\033[0;32m'
  YELLOW='\033[0;33m'
  BLUE='\033[0;34m'
  NC='\033[0m'
  INTERACTIVE=true
else
  # No colors in non-interactive mode
  RED=''
  GREEN=''
  YELLOW=''
  BLUE=''
  NC=''
  INTERACTIVE=false
fi

# Function to display a spinning animation during the LLM processing
spin_animation() {
  # Only show animation in interactive mode
  if [ "$INTERACTIVE" = false ]; then
    return
  fi
  
  # Array of spinner characters for the animation
  spinner=("⠋" "⠙" "⠹" "⠸" "⠼" "⠴" "⠦" "⠧" "⠇" "⠏")
  # Infinite loop to keep the animation running
  while true; do
    for i in "${spinner[@]}"; do
      tput civis  # Hide the cursor to enhance the animation appearance
      tput el1    # Clear the line from the cursor to the beginning to display the spinner
      printf "\\r${YELLOW}%s${NC} Generating LLM commit message..." "$i"  # Print the spinner and message
      sleep 0.1   # Delay to control the speed of the animation
      tput cub 32 # Move the cursor back 32 columns to reset the spinner position
    done
  done
}

# Function to safely display terminal animations/formatting
safe_display() {
  if [ "$INTERACTIVE" = true ]; then
    # In interactive terminal, we can use animations and formatting
    "$@"
  fi
}

# Function to print a message before the commit editor opens
print_pre_editor_message() {
  if [ "$INTERACTIVE" = true ]; then
    echo "${BLUE}=== Generated Commit Message ===${NC}"
    echo "${GREEN}$GENERATED_MSG${NC}"
    echo "${BLUE}=================================${NC}"
    echo
    echo "${GREEN}✅ Generated commit message based on your changes${NC}"
    echo "Opening editor for final review..."
  else
    echo "Generated commit message. Opening editor for final review..."
  fi
}

# Get the diff of staged changes
DIFF=$(git diff --cached)

# Skip if there are no changes
if [ -z "$DIFF" ]; then
  echo "${YELLOW}No staged changes detected.${NC}"
  exit 0
fi

# Check if llm is installed
if ! command -v llm &> /dev/null; then
  echo "${RED}⚠️ llm is not installed. Please install it by running 'pipx install llm'.${NC}"
  exit 1
fi

# Only start animation in interactive terminal
if [ "$INTERACTIVE" = true ]; then
  spin_animation &
  spin_pid=$!
else
  echo "Generating LLM commit message..."
fi

# Check if system prompt file exists and use it if it does
SYSTEM_PROMPT_FILE="$HOME/.config/prompts/commit-system-prompt.txt"
if [ -f "$SYSTEM_PROMPT_FILE" ]; then
  GENERATED_MSG=$(git diff --cached | llm -s "$(cat $SYSTEM_PROMPT_FILE)" 2>&1)
else
  GENERATED_MSG=$(git diff --cached | llm -t gitcommit 2>&1)
fi
result_code=$?

# Stop the spinning animation if it was started
if [ "$INTERACTIVE" = true ]; then
  kill $spin_pid 2>/dev/null
  wait $spin_pid 2>/dev/null
  tput cnorm  # Show the cursor again
  echo  # Move the cursor to the next line
fi

# Check if generation was successful
if [ $result_code -ne 0 ] || [ -z "$GENERATED_MSG" ]; then
  echo "${RED}⚠️ Failed to generate commit message: ${GENERATED_MSG}${NC}"
  exit 1
fi

# Display the message before editor opens
print_pre_editor_message

# Save the original message
ORIG_MSG=$(cat "$1")

# Write the generated message, followed by a separator and the original message
echo "$GENERATED_MSG" > "$1"

# If there was an original message, append it after a separator
if [ -n "$ORIG_MSG" ]; then
  echo "" >> "$1"
  echo "# Original message:" >> "$1"
  echo "# $ORIG_MSG" >> "$1"
fi

exit 0
